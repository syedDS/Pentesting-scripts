#!/usr/bin/python3

# Used python fast IO template
from __future__ import division, print_function
#improve by reducing I/O operation
import zipfile # library to extract zip files
import time #library to control the time spent in the cracking processes
from sys import stdin, stdout
from tqdm import tqdm  # need to yum tqdm using it for drawing a progress bar
import os
import sys # library to control argument of script
from io import BytesIO, IOBase


def main():
     timestamp1=time.time()
     zfile=sys.argv[1]
     dfile=sys.argv[2]

     filezip=zipfile.ZipFile(zfile) # using zipfile library opening ZipFile
     count=0

     #reducing the read with statement
     with open(dfile) as f:
      for line in f:
        password=line.strip("\n")
       #removing the eol
        codedpass=bytes(password, 'utf-8')
       #password code in binary
        count= count + 1

        try:
            filezip.extractall(pwd=codedpass)
        except:
           continue
        else:
            print ("[------- Password Found ---------] --> " + password)
            timestamp2 = time.time()
            diff=(timestamp2 - timestamp1)
       # calculating the try and time consumed
            print (f"Time Consumed %.2f seconds" % diff)

           # for faster output stdout write  doesnt convert object to string which is a overhead in print
            stdout.write('Passwords attempted:'+ str(count) +" At " + str(count/diff) +" tries per second")
            exit(0)


     print(f"[-] Password not found. Attempted: " + str(count))



# region fastio

BUFSIZE = 8192


class FastIO(IOBase):
    newlines = 0

    def __init__(self, file):
        self._fd = file.fileno()
        self.buffer = BytesIO()
        self.writable = "x" in file.mode or "r" not in file.mode
        self.write = self.buffer.write if self.writable else None

    def read(self):
        while True:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            if not b:
                break
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines = 0
        return self.buffer.read()

    def readline(self):
        while self.newlines == 0:
            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))
            self.newlines = b.count(b"\n") + (not b)
            ptr = self.buffer.tell()
            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)
        self.newlines -= 1
        return self.buffer.readline()

    def flush(self):
        if self.writable:
            os.write(self._fd, self.buffer.getvalue())
            self.buffer.truncate(0), self.buffer.seek(0)


class IOWrapper(IOBase):
    def __init__(self, file):
        self.buffer = FastIO(file)
        self.flush = self.buffer.flush
        self.writable = self.buffer.writable
        self.write = lambda s: self.buffer.write(s.encode("ascii"))
        self.read = lambda: self.buffer.read().decode("ascii")
        self.readline = lambda: self.buffer.readline().decode("ascii")


sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)
input = lambda: sys.stdin.readline().rstrip("\r\n")

# endregion

if __name__ == "__main__":
    main()
